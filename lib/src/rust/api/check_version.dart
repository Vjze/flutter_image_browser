// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.9.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'package:freezed_annotation/freezed_annotation.dart' hide protected;
part 'check_version.freezed.dart';

// These functions are ignored because they are not marked as `pub`: `get_downloads_path`, `launch_update_process`, `unzip_file`
// These types are ignored because they are neither used by any `pub` functions nor (for structs and enums) marked `#[frb(unignore)]`: `Platform`, `UpdateInfos`
// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `clone`, `clone`, `clone`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`

Future<UpdateInfo?> checkUpdate() =>
    RustLib.instance.api.crateApiCheckVersionCheckUpdate();

Stream<DownloadEvent> downloadUpdate({
  required String url,
  required String fileName,
}) => RustLib.instance.api.crateApiCheckVersionDownloadUpdate(
  url: url,
  fileName: fileName,
);

Future<void> runInstaller({required String installerPath}) => RustLib
    .instance
    .api
    .crateApiCheckVersionRunInstaller(installerPath: installerPath);

Future<void> installUpdate({required String fileName}) =>
    RustLib.instance.api.crateApiCheckVersionInstallUpdate(fileName: fileName);

@freezed
sealed class DownloadEvent with _$DownloadEvent {
  const DownloadEvent._();

  const factory DownloadEvent.progress(DownloadProgress field0) =
      DownloadEvent_Progress;
  const factory DownloadEvent.error(String field0) = DownloadEvent_Error;
}

class DownloadProgress {
  final BigInt downloadedBytes;
  final BigInt totalBytes;
  final double speed;
  final double progress;

  const DownloadProgress({
    required this.downloadedBytes,
    required this.totalBytes,
    required this.speed,
    required this.progress,
  });

  @override
  int get hashCode =>
      downloadedBytes.hashCode ^
      totalBytes.hashCode ^
      speed.hashCode ^
      progress.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is DownloadProgress &&
          runtimeType == other.runtimeType &&
          downloadedBytes == other.downloadedBytes &&
          totalBytes == other.totalBytes &&
          speed == other.speed &&
          progress == other.progress;
}

class UpdateInfo {
  final String version;
  final String changelog;
  final String downloadUrl;
  final String fileName;
  final String date;

  const UpdateInfo({
    required this.version,
    required this.changelog,
    required this.downloadUrl,
    required this.fileName,
    required this.date,
  });

  @override
  int get hashCode =>
      version.hashCode ^
      changelog.hashCode ^
      downloadUrl.hashCode ^
      fileName.hashCode ^
      date.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is UpdateInfo &&
          runtimeType == other.runtimeType &&
          version == other.version &&
          changelog == other.changelog &&
          downloadUrl == other.downloadUrl &&
          fileName == other.fileName &&
          date == other.date;
}
